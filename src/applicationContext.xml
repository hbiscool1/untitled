<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:p="http://www.springframework.org/schema/p" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
	http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.2.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
    http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc.xsd">
    
    

  
	<!-- 数据源 -->
	<bean name="abc" class="org.apache.commons.dbcp.BasicDataSource"> 
  <property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
  <property name="url" value="jdbc:mysql://localhost:3306/easybuy"></property>
  <property name="username" value="root"></property>
  <property name="password" value="138749"></property>
  </bean>

	
	<!-- 创建spring和mybatis整合后用的工厂对象 -->
	 <bean id="fact" class="org.mybatis.spring.SqlSessionFactoryBean">

		<!-- 指定该工厂需要的数据源 -->
		<property name="dataSource" ref="abc"></property>

		<!-- 指定mybatis框架的主配置文件路径，mybatis框架由spring框架来启动 -->
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
	</bean>
	<!-- mapper扫描器，来创建dao接口的实现类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">

		<!-- 扫描的包 -->
		<property name="basePackage" value="com.hb.dao"></property>
		<!-- 需要一个session工厂对象的名字（其实获得的session工厂对象给了创建出来的
		dao实现类来做数据库操作） -->
		<property name="sqlSessionFactoryBeanName" value="fact"></property>

	</bean>
	
	   <!-- 静态资源解析   包括:JS.Css.img等-->
    <mvc:resources location="/js/" mapping="/js/**"/>
    <mvc:resources location="/images/" mapping="/images/**"/>
    <mvc:resources location="/css/" mapping="/css/**"/>
    <mvc:resources location="/photo/" mapping="/photo/**"/>
   
             
    
    
	
	<context:component-scan base-package="com.hb.service.impl,com.hb.Controller"></context:component-scan>
	<!-- 事务bean -->
	<bean id="trans" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="abc"></property>
	</bean>
	<!-- 事务级别 -->
	<tx:advice id="txAdvice" transaction-manager="trans">
		<tx:attributes>
			 <tx:method name="add*"  propagation="REQUIRED"/>
			<!-- <tx:method name="ooo*" read-only="true" propagation="SUPPORTS"/>  -->
		</tx:attributes>
	</tx:advice>
		<!-- 将切入点和事务组合 -->
	<aop:config>
		<aop:pointcut expression="execution(* com.hb.easybuy.service.impl.*.*(..))" id="pc"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="pc" />
	</aop:config>
	
	     
	<!-- 方法一 <bean name="/Login.html" class="com.hb.Controller.LoginController"/>   -->  
	<!-- 负责创建对象 方法二 -->
	<!-- <context:component-scan base-package="com.hb.Controller"></context:component-scan> -->
	<!-- 负责将方法和url对应  -->
	 

	<!-- 完成视图的对应 -->
	<!-- 对转向页面的路径解析。prefix：前缀， suffix：后缀 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" >
		<property name="prefix" value=""/>
		<property name="suffix" value=""/>
	</bean> 
	
	<!-- Springmvc项目中异常的处理 -->
	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
	<property name="exceptionMappings">
	<props>
	<prop key="java.lang.Exception">WEB-INF/errorReport.jsp</prop>
	</props>
	</property>
	</bean>
	<!-- 文件上传 -->
	<bean id="multipartResolver"  class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	<!-- 设置文件上传大小 -->
	<property name="maxUploadSize">
	<value>1000000</value>
	
	</property>
	</bean>
	<!-- 消息转换器！ -->
     <!-- <mvc:annotation-driven>
       <mvc:message-converters>
      		 <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>application/json;charset=UTF-8</value>
                        <value>text/plain;charset=UTF-8</value>
                    </list>
                </property>
            </bean>
             
       </mvc:message-converters>
    </mvc:annotation-driven> -->



	<!--配置拦截器--><!--拦截去控制器之前的方法-->
	<mvc:interceptors>
		<mvc:interceptor>
			<!--要拦截的方法：配置一个即可-->
			<mvc:mapping path="/*"/>

            <mvc:exclude-mapping path="/cc.html"/>
			<mvc:exclude-mapping path="/tpaperSt"/>

			<!--配置拦截器对象-->
			<bean class="com.hb.interceptor.LoginInterceptor" />

			<!--不拦截的方法：配置一个即可-->
			<!--<mvc:exclude-mapping path=""></mvc:exclude-mapping>-->
		</mvc:interceptor>
	</mvc:interceptors>


	<!--转换器-->
    <bean id="myConversionService" class="org.springframework.context.support.ConversionServiceFactoryBean">
    	<property name="converters">
    		<list>
    			<bean class="com.hb.tools.Converter9"></bean>
    		</list>
    	</property>
        </bean>


    
     <mvc:annotation-driven conversion-service="myConversionService">
 
			<mvc:message-converters register-defaults="true">
				<bean 
                 class="org.springframework.http.converter.StringHttpMessageConverter">
					<constructor-arg index="0" value="UTF-8"></constructor-arg>
				</bean>
 
			</mvc:message-converters>
	</mvc:annotation-driven> 
	

    
    
    
</beans>